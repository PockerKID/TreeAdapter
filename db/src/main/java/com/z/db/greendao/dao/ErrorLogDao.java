package com.z.db.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.z.db.greendao.entities.ErrorLog;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ERROR_LOG".
*/
public class ErrorLogDao extends AbstractDao<ErrorLog, Long> {

    public static final String TABLENAME = "ERROR_LOG";

    /**
     * Properties of entity ErrorLog.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DeviceNumber = new Property(1, String.class, "deviceNumber", false, "DEVICE_NUMBER");
        public final static Property DeviceType = new Property(2, String.class, "deviceType", false, "DEVICE_TYPE");
        public final static Property OsVersion = new Property(3, String.class, "osVersion", false, "OS_VERSION");
        public final static Property AppVersion = new Property(4, String.class, "appVersion", false, "APP_VERSION");
        public final static Property Time = new Property(5, long.class, "time", false, "TIME");
        public final static Property ErrorInfo = new Property(6, String.class, "errorInfo", false, "ERROR_INFO");
        public final static Property ClassTag = new Property(7, String.class, "classTag", false, "CLASS_TAG");
        public final static Property FunctionTag = new Property(8, String.class, "functionTag", false, "FUNCTION_TAG");
    }


    public ErrorLogDao(DaoConfig config) {
        super(config);
    }
    
    public ErrorLogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ERROR_LOG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DEVICE_NUMBER\" TEXT," + // 1: deviceNumber
                "\"DEVICE_TYPE\" TEXT," + // 2: deviceType
                "\"OS_VERSION\" TEXT," + // 3: osVersion
                "\"APP_VERSION\" TEXT," + // 4: appVersion
                "\"TIME\" INTEGER NOT NULL ," + // 5: time
                "\"ERROR_INFO\" TEXT," + // 6: errorInfo
                "\"CLASS_TAG\" TEXT," + // 7: classTag
                "\"FUNCTION_TAG\" TEXT);"); // 8: functionTag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ERROR_LOG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ErrorLog entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String deviceNumber = entity.getDeviceNumber();
        if (deviceNumber != null) {
            stmt.bindString(2, deviceNumber);
        }
 
        String deviceType = entity.getDeviceType();
        if (deviceType != null) {
            stmt.bindString(3, deviceType);
        }
 
        String osVersion = entity.getOsVersion();
        if (osVersion != null) {
            stmt.bindString(4, osVersion);
        }
 
        String appVersion = entity.getAppVersion();
        if (appVersion != null) {
            stmt.bindString(5, appVersion);
        }
        stmt.bindLong(6, entity.getTime());
 
        String errorInfo = entity.getErrorInfo();
        if (errorInfo != null) {
            stmt.bindString(7, errorInfo);
        }
 
        String classTag = entity.getClassTag();
        if (classTag != null) {
            stmt.bindString(8, classTag);
        }
 
        String functionTag = entity.getFunctionTag();
        if (functionTag != null) {
            stmt.bindString(9, functionTag);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ErrorLog entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String deviceNumber = entity.getDeviceNumber();
        if (deviceNumber != null) {
            stmt.bindString(2, deviceNumber);
        }
 
        String deviceType = entity.getDeviceType();
        if (deviceType != null) {
            stmt.bindString(3, deviceType);
        }
 
        String osVersion = entity.getOsVersion();
        if (osVersion != null) {
            stmt.bindString(4, osVersion);
        }
 
        String appVersion = entity.getAppVersion();
        if (appVersion != null) {
            stmt.bindString(5, appVersion);
        }
        stmt.bindLong(6, entity.getTime());
 
        String errorInfo = entity.getErrorInfo();
        if (errorInfo != null) {
            stmt.bindString(7, errorInfo);
        }
 
        String classTag = entity.getClassTag();
        if (classTag != null) {
            stmt.bindString(8, classTag);
        }
 
        String functionTag = entity.getFunctionTag();
        if (functionTag != null) {
            stmt.bindString(9, functionTag);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ErrorLog readEntity(Cursor cursor, int offset) {
        ErrorLog entity = new ErrorLog( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // deviceNumber
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // deviceType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // osVersion
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // appVersion
            cursor.getLong(offset + 5), // time
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // errorInfo
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // classTag
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // functionTag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ErrorLog entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDeviceNumber(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDeviceType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOsVersion(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAppVersion(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTime(cursor.getLong(offset + 5));
        entity.setErrorInfo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setClassTag(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFunctionTag(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ErrorLog entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ErrorLog entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ErrorLog entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
